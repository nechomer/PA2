package ic.parser;

import ic.ast.*;

parser code  {:
	/** Causes the parsr to print every token it reads.
	 * This is useful for debugging.
	 */
	public boolean printTokens;
	
	private Lexer lexer;

	public Parser(Lexer lexer) {
		super(lexer);
		this.lexer = lexer;
	}
	
	public int getLine() {
		return lexer.getLineNumber();
	}
	
	public void syntax_error(Symbol s) {
		Token tok = (Token) s;
		System.out.println("Line " + tok.getLine()+": Syntax error; unexpected " + tok);
	}
:}

// This is just for debugging
scan with {:
	Token t = lexer.next_token();
	if (printTokens)
		System.out.println(t.getLine() + ":" + t);
	return t; 
:};

/*********** Symbol list - terminals ***********/
terminal LBRACE, RBRACE, LPAREN, RPAREN, SEMI, COMA, DOT;
terminal LBRACKET, RBRACKET; /****array_type****/
terminal OTHER_SYMBOL; /****Debug****/
terminal STATIC;
terminal VOID, INTEGER, STRING, BOOLEAN;
terminal java.lang.String IDENTIFIER; /****var_name****/
terminal CLASS;
terminal java.lang.String CLASS_ID; /****class_name****/
terminal java.lang.String METHOD_ID;

terminal java.lang.Number INTEGER_LITERAL;
terminal java.lang.Boolean BOOLEAN_LITERAL;
terminal java.lang.String STRING_LITERAL;
terminal NULL_LITERAL;

/*********** Symbol list - non-terminals) ***********/
non terminal  ICClass icclass;
non terminal  StaticMethod stmethod;
non terminal  MethodBlock method_block;
non terminal  Formal formal;
non terminal  FormalBlock formal_block;
non terminal  Type type;


/*********** Precedence declarations ***********/


/*********** The grammar ***********/

icclass ::= CLASS CLASS_ID:ci LBRACE method_block:ml RBRACE
{:RESULT = new ICClass(getLine(), ci, null, ml):};

method_block ::= stmethod:sm
	{: RESULT = new MethodBlock(sm); :}
	| method_block:ml stmethod:sm
	{: ml.addMethod(sm); RESULT = ml; :};

stmethod ::= STATIC type:t METHOD_ID:mi LPAREN formal_block:fl RPAREN SEMI
{:RESULT = new StaticMethod(t,mi,fl,null) :};

formal_block ::= formal:f
	{: RESULT = new FormalBlock(f); :}
	| formal_block:fl formal:f
	{: fl.addFormal(f); RESULT = fl; :};

formal  ::= type:t IDENTIFIER:i
{:RESULT = new Formal(t,i):};

type ::=	INTEGER_LITERAL:il
	{:RESULT = new Type(getLine()):}
		|	BOOLEAN_LITERAL
	{:RESULT = new Type(getLine()):}
		|	STRING_LITERAL
	{:RESULT = new Type(getLine()):}
		|	NULL_LITERAL
	{:RESULT = new Type(getLine()):};
		

package ic.parser;

import ic.*;
import ic.parser.*;
import ic.ast.*;
import ic.ast.expr.*;
import ic.ast.methods.*;
import ic.ast.stmt.*;
import ic.ast.types.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
class LibraryParser;

parser code  {:
	/** Causes the parsr to print every token it reads.
	 * This is useful for debugging.
	 */
	
	public boolean printTokens;
	
	private Lexer lexer;
	private int currentLine = 0;

	public LibraryParser(Lexer lexer) {
		super(lexer);
		this.lexer = lexer;
	}
	
	public int getLine() {
		return currentLine;
	}
	
	public void syntax_error(Symbol s) {
		Token tok = (Token) s;
		System.out.println("Line " + tok.getLine()+": Syntax error; unexpected " + tok);
	}
:}

// This is just for debugging
scan with {:
	Token t = lexer.next_token();
	currentLine = t.getLine();
	if (printTokens)
		System.out.println(t.getLine() + ":" + t);
	return t; 
:};

/*********** Symbol list - terminals ***********/
terminal CLASS, EXTENDS, STATIC;
terminal VOID, INTEGER, BOOLEAN, STRING;
terminal RETURN, IF, ELSE, WHILE, BREAK, CONTINUE;
terminal THIS, NEW, LENGTH;
terminal LBRACKET, RBRACKET; /****array_type****/
terminal LPAREN, RPAREN;
terminal DOT, MINUS, NOT, MULT, DIV, MODULU, PLUS, LT, LTEQ, GT, GTEQ, EQEQ, NEQ, AND, OR, EQ;
terminal LBRACE, RBRACE, SEMI, COMA;


terminal java.lang.String IDENTIFIER; /****var_name****/
terminal java.lang.String CLASS_ID; /****class_name****/
terminal java.lang.Number INTEGER_LITERAL;
terminal java.lang.Boolean BOOLEAN_LITERAL;
terminal java.lang.String STRING_LITERAL;
terminal NULL_LITERAL;

/*********** Symbol list - non-terminals) ***********/

non terminal Program program;
non terminal ICClass icclass;
non terminal List<ICClass> icclass_block;
non terminal String class_extends;
non terminal List<ASTNode> class_body;

non terminal Method method;
non terminal List<Field> field_list;
non terminal Field field;

non terminal StaticMethod static_method;
non terminal VirtualMethod virtual_method;


non terminal List<Statement> stmt_list;
non terminal Statement stmt;
non terminal StatementsBlock stmt_block;

non terminal Assignment assignment_stmt;
non terminal CallStatement call_stmt;
non terminal Return return_stmt;
non terminal If if_stmt;
non terminal If if_else_stmt;
non terminal While while_stmt;
non terminal Break break_stmt;
non terminal Continue continue_stmt;


non terminal StaticCall static_call;
non terminal VirtualCall virtual_call;

non terminal List<Formal> formal_list;
non terminal Formal formal;
non terminal Type method_type;
non terminal Type type;

non terminal StaticCall staticCall;
non terminal VirtualCall virtualCall;
non terminal Expression expr;
non terminal List<Expression> expr_list;
non terminal Location location;
non terminal Call call_expr;
non terminal BinaryOp binop;
non terminal UnaryOp unop;
non terminal Literal literal;

/*********** Precedence declarations ***********/


/*********** The grammar ***********/

program ::= icclass:icc
	|		icclass_block:iccb icclass:icc
	| 		/* return new program with empty List<ICClass> */
	;

icclass ::= CLASS CLASS_ID:ci class_extends:ce LBRACE class_body:cb RBRACE
	;

class_extends ::= 	EXTENDS CLASS_ID:ci
	| 				/* return null as String */
	;

class_body ::= 	class_body:cb field_list:fl SEMI		/* return new List<ASTNode> after cb
															list unified with field list */
	|			class_body:cb method:m SEMI
	| 				/* return empty List<ASTNode> */
	;

method ::= 	static_method
	|		virtual_method
	;

field_list ::= 	field:f
	| 			field_list:fl COMA field:f
	;

field ::= type:t IDENTIFIER:i
	{: RESULT = new Field(t,i); System.out.println("added field t= "+t+" : i= "+i); :}
	;

static_method ::= STATIC method_type:t IDENTIFIER:id LPAREN RPAREN LBRACKET stmt_list:sl RBRACKET
	STATIC method_type:t IDENTIFIER:id LPAREN formal_list:fl RPAREN LBRACKET stmt_list:sl RBRACKET
	;

virtual_method ::= 	method_type:t IDENTIFIER:id LPAREN RPAREN LBRACKET stmt_list:sl RBRACKET
	method_type:t IDENTIFIER:id LPAREN formal_list:fl RPAREN LBRACKET stmt_list:sl RBRACKET
	;


stmt_list ::=		stmt_list:sl stmt:st
	| 				/* return empty List<Statement> */
	;

stmt ::= 	assignment_stmt:as SEMI
	|		call_stmt:cs
	|		return_stmt:rs SEMI
	|		if_stmt:is SEMI
	|		if_else_stmt:ies
	|		while_stmt:ws
	|		break_stmt:bs SEMI
	|		continue_stmt:cs SEMI
	|		stmt_block:sb
	|		type IDENTIFIER:i SEMI
	|		type IDENTIFIER:i EQ expr:e SEMI
	;

assignment_stmt ::= location:l EQ expr:e
	;

call_stmt ::= 	call_expr SEMI
	;

return_stmt ::= RETURN
	|			RETURN expr:e
	;

if_stmt ::= IF LPAREN expr:e RPAREN stmt:s
	;

if_else_stmt ::= IF LPAREN expr:e RPAREN stmt:s ELSE stmt:s
	;

while_stmt ::= WHILE LPAREN expr:e RPAREN stmt:s
	;

break_stmt ::= BREAK
	;

continue_stmt ::= CONTINUE
	;

stmt_block ::=	LBRACKET stmt_list:sl RBRACKET
	;

expr ::= location:l
	|	call_expr:c
	|	THIS
	|	NEW CLASS_ID LPAREN RPAREN
	|	NEW type:t LBRACKET expr:e RBRACKET
	|	expr:e DOT LENGTH
	|	expr:e binop:b expr:e
	|	unop:u expr:e
	|	literal:l
	|	LPAREN expr:e RPAREN
	;

call_expr ::= 	static_call
	|			virtual_call
	;

expr_list ::= expr:e
	|	expr_list:el COMA expr:e
	;

formal_list ::= formal:f
	| 			formal_list:fl COMA formal:f
	;

formal  ::= type:t IDENTIFIER:i
	{: RESULT = new Formal(t,i); System.out.println("added formal t= "+t+" : i= "+i); :}
	;

method_type ::=	type
	|			VOID
	{: RESULT = new PrimitiveType(getLine(), DataTypes.VOID); System.out.println("type void"); :}
	;

type  ::= 		INTEGER
	{: RESULT = new PrimitiveType(getLine(), DataTypes.INT); System.out.println("added primitive integer"); :}
		|		BOOLEAN
	{: RESULT = new PrimitiveType(getLine(), DataTypes.BOOLEAN); System.out.println("added primitive boolean");:}
		|		STRING
	{: RESULT = new PrimitiveType(getLine(), DataTypes.STRING); System.out.println("added primitive string");:}
		|		CLASS_ID:ci
	{: RESULT = new UserType(getLine(), ci); System.out.println("added TYPE User Defined type");:}
		| 		type:ft LBRACKET RBRACKET
	{: ft.incrementDimension(); RESULT = ft; System.out.println("added array ft=" + ft);:} 
	;

staticCall ::= CLASS_ID:ci DOT IDENTIFIER:id LPAREN RPAREN 
		|	   CLASS_ID:ci DOT IDENTIFIER:id LPAREN expr:e expr_list:el RPAREN 	
		;
		
virtualCall ::= DOT IDENTIFIER:id LPAREN RPAREN 
		|	    DOT IDENTIFIER:id LPAREN expr_list:el RPAREN
		|		expr:e DOT IDENTIFIER:id LPAREN RPAREN 
		|	    expr:e DOT IDENTIFIER:id LPAREN expr_list:el RPAREN 	 	
		;
		
location ::=	IDENTIFIER:id
		|		expr:e DOT IDENTIFIER:id
		|		expr:e LBRACE expr:e RBRACE
		;

binop	::=		PLUS:bop
		|		MINUS:bop
		|	    MULT:bop
		|		DIV:bop
		|	    MODULU:bop
		|		AND:bop
		|		OR:bop
		|		LT:bop
		|		LTEQ:bop
		|		GT:bop
		|		GTEQ:bop
		|		EQEQ:bop
		|		NEQ:bop
		;
		
		
unop	::=		MINUS:uop 			/* which is UMINUS actually */
		|		NOT:uop
		;
		
literal ::=	    STRING_LITERAL:st
		|		INTEGER_LITERAL:int
		|		BOOLEAN_LITERAL:bool
		|		NULL_LITERAL:nullPtr
		;
